---
import type { HTMLAttributes } from "astro/types";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/utils/cn";

export interface Props extends HTMLAttributes<"button"> {
  href?: string;
  class?: string;
  variant?: VariantProps<typeof buttonVariants>["variant"];
  size?: VariantProps<typeof buttonVariants>["size"];
}

const { href, variant, size, ...props } = Astro.props;

const buttonVariants = cva(
  [
    "group space-x-3",
    "font-medium uppercase rounded-2xl",
    "w-full inline-flex items-center justify-center",
    "transition ease-in-out duration-200",
  ],
  {
    variants: {
      variant: {
        primary:
          "bg-purple-950 text-white border-2 border-transparent hover:bg-transparent hover:backdrop-blur-md hover:border-purple-950 hover:text-purple-950",
        outline:
          "bg-transparent backdrop-blur-md border-2 border-purple-950 text-purple-950 hover:bg-purple-950 hover:text-white",
      },
      size: {
        xs: "py-3 px-4",
        sm: "px-2 py-1",
        base: "px-4 py-3",
        md: "py-5 px-8",
        lg: "py-4 px-10",
      },
    },
    defaultVariants: {
      variant: "primary",
      size: "base",
    },
  }
);
---

{
  href ? (
    <a
      href={href}
      class={cn(buttonVariants({ variant, size, class: Astro.props.class }))}
      {...props}
    >
      <slot />
    </a>
  ) : (
    <button
      class={cn(buttonVariants({ variant, size, class: Astro.props.class }))}
      {...props}
    >
      <slot />
    </button>
  )
}
